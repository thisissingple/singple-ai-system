/**
 * Debug Total Report KPI Calculation
 * Ê™¢Êü•Âæû Supabase ÂèñÂæóÁöÑË≥áÊñôÂíå KPI Ë®àÁÆóÈÇèËºØ
 */

import { totalReportService } from './server/services/reporting/total-report-service';
import { supabaseReportRepository } from './server/services/reporting/supabase-report-repository';

async function main() {
  console.log('='.repeat(60));
  console.log('üîç Debug Total Report KPI Calculation');
  console.log('='.repeat(60));
  console.log('');

  try {
    // 1. Ê™¢Êü• Supabase ÈÄ£Á∑ö
    console.log('1Ô∏è‚É£ Checking Supabase connection...');
    const isAvailable = supabaseReportRepository.isAvailable();
    console.log(`   Supabase available: ${isAvailable ? '‚úÖ YES' : '‚ùå NO'}`);
    console.log('');

    if (!isAvailable) {
      console.error('‚ùå Supabase not available! Please check environment variables:');
      console.error('   - SUPABASE_URL');
      console.error('   - SUPABASE_ANON_KEY or SUPABASE_SERVICE_ROLE_KEY');
      return;
    }

    // 2. ÂèñÂæóË≥áÊñôÁ≠ÜÊï∏
    console.log('2Ô∏è‚É£ Fetching table counts from Supabase...');
    const counts = await supabaseReportRepository.getTableCounts();
    console.log(`   Attendance: ${counts.attendance} records`);
    console.log(`   Purchases: ${counts.purchases} records`);
    console.log(`   Deals (EODs): ${counts.deals} records`);
    console.log('');

    if (counts.attendance === 0 && counts.purchases === 0 && counts.deals === 0) {
      console.error('‚ö†Ô∏è  WARNING: All tables are empty!');
      console.error('   Please sync Google Sheets data to Supabase first.');
      return;
    }

    // 3. ÂèñÂæó date rangeÔºà‰ΩøÁî® 'all' periodÔºâ
    console.log('3Ô∏è‚É£ Fetching data with period="all"...');
    const dateRange = totalReportService.getDateRange('all', new Date());
    console.log(`   Date range: ${dateRange.start} to ${dateRange.end}`);
    console.log('');

    const warnings: string[] = [];
    const { attendanceData, purchaseData, eodsData, dataSource } = await totalReportService.fetchRawData(dateRange, warnings);

    console.log(`   Data source: ${dataSource.toUpperCase()}`);
    console.log(`   Attendance data: ${attendanceData.length} records`);
    console.log(`   Purchase data: ${purchaseData.length} records`);
    console.log(`   EODs data: ${eodsData.length} records`);
    console.log('');

    if (warnings.length > 0) {
      console.log('   ‚ö†Ô∏è  Warnings:');
      warnings.forEach(w => console.log(`      - ${w}`));
      console.log('');
    }

    // 4. Ê™¢Êü•Ââç 3 Á≠ÜË≥áÊñôÁöÑÊ¨Ñ‰Ωç
    console.log('4Ô∏è‚É£ Inspecting data fields...');
    console.log('');

    if (attendanceData.length > 0) {
      console.log('   üìã Attendance Data (first record):');
      const firstAttendance = attendanceData[0];
      console.log('      Fields:', Object.keys(firstAttendance.data).join(', '));
      console.log('      Sample data:', JSON.stringify(firstAttendance.data, null, 2).split('\n').map(l => '      ' + l).join('\n'));
      console.log('');
    }

    if (purchaseData.length > 0) {
      console.log('   üí∞ Purchase Data (first record):');
      const firstPurchase = purchaseData[0];
      console.log('      Fields:', Object.keys(firstPurchase.data).join(', '));
      console.log('      Sample data:', JSON.stringify(firstPurchase.data, null, 2).split('\n').map(l => '      ' + l).join('\n'));
      console.log('');
    }

    if (eodsData.length > 0) {
      console.log('   üìä EODs Data (first record):');
      const firstEod = eodsData[0];
      console.log('      Fields:', Object.keys(firstEod.data).join(', '));
      console.log('      Sample data:', JSON.stringify(firstEod.data, null, 2).split('\n').map(l => '      ' + l).join('\n'));
      console.log('');
    }

    // 5. Áî¢ÁîüÂÆåÊï¥Â†±Ë°®
    console.log('5Ô∏è‚É£ Generating total report...');
    const report = await totalReportService.generateReport({
      period: 'all',
      baseDate: new Date().toISOString().split('T')[0],
    });

    if (!report) {
      console.error('‚ùå Failed to generate report');
      return;
    }

    console.log('   ‚úÖ Report generated successfully');
    console.log('');

    // 6. È°ØÁ§∫ KPI ÁµêÊûú
    console.log('6Ô∏è‚É£ Summary Metrics (KPIs):');
    console.log('');
    console.log('   üìä ËΩâÊèõÁéá (Conversion Rate):', `${report.summaryMetrics.conversionRate.toFixed(2)}%`);
    console.log('   ‚è±Ô∏è  Âπ≥ÂùáËΩâÊèõÊôÇÈñì (Avg Conversion Time):', `${report.summaryMetrics.avgConversionTime} days`);
    console.log('   ‚úÖ È´îÈ©óË™≤ÂÆåÊàêÁéá (Trial Completion Rate):', `${report.summaryMetrics.trialCompletionRate.toFixed(2)}%`);
    console.log('   üë• ÂæÖËøΩËπ§Â≠∏Âì° (Pending Students):', report.summaryMetrics.pendingStudents);
    console.log('   üí∞ ÊΩõÂú®Êî∂Áõä (Potential Revenue):', `NT$ ${report.summaryMetrics.potentialRevenue.toLocaleString()}`);
    console.log('   üìö È´îÈ©óË™≤Á∏ΩÊï∏ (Total Trials):', report.summaryMetrics.totalTrials);
    console.log('   üéØ Êàê‰∫§Á∏ΩÊï∏ (Total Conversions):', report.summaryMetrics.totalConversions);
    console.log('');

    // 7. È°ØÁ§∫ÊºèÊñóÊï∏Êìö
    console.log('7Ô∏è‚É£ Funnel Data:');
    report.funnelData.forEach(stage => {
      console.log(`   ${stage.stage}: ${stage.value}`);
    });
    console.log('');

    // 8. È°ØÁ§∫ÊïôÂ∏´Êï∏ÊìöÔºàÂâç 5 ÂêçÔºâ
    console.log('8Ô∏è‚É£ Teacher Insights (Top 5):');
    report.teacherInsights.slice(0, 5).forEach((teacher, idx) => {
      console.log(`   ${idx + 1}. ${teacher.teacherName}`);
      console.log(`      Classes: ${teacher.classCount}, Conversion: ${teacher.conversionRate}%, Revenue: NT$ ${teacher.totalRevenue.toLocaleString()}`);
    });
    console.log('');

    // 9. È°ØÁ§∫Â≠∏ÁîüÊï∏ÊìöÔºàÂâç 5 ÂêçÔºâ
    console.log('9Ô∏è‚É£ Student Insights (First 5):');
    report.studentInsights.slice(0, 5).forEach((student, idx) => {
      console.log(`   ${idx + 1}. ${student.studentName} (${student.email})`);
      console.log(`      Status: ${student.status}, Intent Score: ${student.intentScore}, Teacher: ${student.teacherName}`);
    });
    console.log('');

    // 10. Ê™¢Êü•Ë≠¶Âëä
    if (report.warnings && report.warnings.length > 0) {
      console.log('‚ö†Ô∏è  Report Warnings:');
      report.warnings.forEach(w => console.log(`   - ${w}`));
      console.log('');
    }

    console.log('='.repeat(60));
    console.log('‚úÖ Debug Complete');
    console.log('='.repeat(60));

  } catch (error) {
    console.error('');
    console.error('‚ùå Error:', error);
    console.error('');
    if (error instanceof Error) {
      console.error('Stack trace:', error.stack);
    }
  }
}

main();
