import React, { useState, useEffect } from 'react';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from './ui/card';
import { Button } from './ui/button';
import { Badge } from './ui/badge';
import { Tabs, TabsContent, TabsList, TabsTrigger } from './ui/tabs';
import { Progress } from './ui/progress';
import { Alert, AlertDescription } from './ui/alert';
import {
  BarChart,
  Bar,
  LineChart,
  Line,
  PieChart,
  Pie,
  Cell,
  XAxis,
  YAxis,
  CartesianGrid,
  Tooltip,
  Legend,
  ResponsiveContainer
} from 'recharts';
import {
  Brain,
  TrendingUp,
  FileText,
  BarChart3,
  PieChart as PieChartIcon,
  Activity,
  CheckCircle,
  AlertCircle,
  RefreshCw,
  Zap
} from 'lucide-react';
import { apiRequest } from '@/lib/queryClient';

interface ColumnAnalysis {
  name: string;
  type: 'string' | 'number' | 'date' | 'boolean' | 'email' | 'phone' | 'currency';
  confidence: number;
  samples: any[];
  nullCount: number;
  uniqueCount: number;
  patterns?: string[];
}

interface ReportSuggestion {
  type: 'kpi' | 'chart' | 'table' | 'funnel' | 'trend';
  title: string;
  description: string;
  chartType?: 'bar' | 'line' | 'pie' | 'area' | 'scatter';
  metrics: Array<{
    column: string;
    aggregation: 'sum' | 'count' | 'average' | 'max' | 'min' | 'countDistinct';
  }>;
  filters?: Array<{
    column: string;
    type: 'date' | 'category' | 'numeric';
  }>;
  groupBy?: string[];
  confidence: number;
}

interface WorksheetAnalysis {
  id: string;
  worksheetId: string;
  category: 'sales' | 'customer' | 'analytics' | 'inventory' | 'financial' | 'education' | 'unknown';
  confidence: number;
  columnAnalyses: ColumnAnalysis[];
  rowCount: number;
  suggestedReports: ReportSuggestion[];
  dataQuality: {
    completeness: number;
    consistency: number;
    accuracy: number;
  };
  lastAnalyzedAt: string;
}

interface AutoGeneratedReport {
  id: string;
  worksheetAnalysisId: string;
  reportType: 'kpi' | 'chart' | 'table' | 'funnel' | 'trend';
  title: string;
  description?: string;
  config: {
    chartType?: 'bar' | 'line' | 'pie' | 'area' | 'scatter';
    metrics: Array<{
      column: string;
      aggregation: 'sum' | 'count' | 'average' | 'max' | 'min' | 'countDistinct';
    }>;
  };
  data: any;
  isActive: boolean;
  lastGeneratedAt: string;
}

interface Props {
  spreadsheetId: string;
  worksheets: Array<{ id: string; worksheetName: string; isEnabled: boolean }>;
}

export function AutoAnalysisDashboard({ spreadsheetId, worksheets }: Props) {
  const [analyses, setAnalyses] = useState<WorksheetAnalysis[]>([]);
  const [reports, setReports] = useState<AutoGeneratedReport[]>([]);
  const [isAnalyzing, setIsAnalyzing] = useState(false);
  const [isGeneratingReport, setIsGeneratingReport] = useState(false);
  const [selectedAnalysis, setSelectedAnalysis] = useState<WorksheetAnalysis | null>(null);
  const [activeTab, setActiveTab] = useState('overview');
  const [error, setError] = useState<string | null>(null);
  const [debugInfo, setDebugInfo] = useState<any>(null);

  useEffect(() => {
    loadAnalyses();
  }, [spreadsheetId]);

  const loadAnalyses = async () => {
    try {
      setError(null);
      const data = await apiRequest('GET', `/api/spreadsheets/${spreadsheetId}/analyses`);
      setAnalyses(Array.isArray(data) ? data : data.analyses || []);
    } catch (error: any) {
      console.error('Error loading analyses:', error);
      setError(`載入分析失敗: ${error.message || '網路錯誤'}`);
    }
  };

  const loadReports = async (worksheetId: string) => {
    try {
      const data = await apiRequest('GET', `/api/worksheets/${worksheetId}/auto-reports`);
      setReports(data);
    } catch (error) {
      console.error('Error loading reports:', error);
    }
  };

  const analyzeAllWorksheets = async () => {
    setIsAnalyzing(true);
    setError(null);

    try {
      console.log('🚀 Starting analysis for spreadsheet:', spreadsheetId);

      const data = await apiRequest('POST', `/api/spreadsheets/${spreadsheetId}/analyze-all`);

      console.log('✅ Analysis completed:', data);

      // Handle both old and new response formats
      if (data.analyses) {
        setAnalyses(data.analyses);
        if (data.summary && data.summary.errors > 0) {
          setError(`分析完成，但有 ${data.summary.errors} 個錯誤: ${data.summary.errorMessages?.join(', ')}`);
        }
      } else {
        setAnalyses(Array.isArray(data) ? data : []);
      }
    } catch (error: any) {
      console.error('❌ Error analyzing worksheets:', error);
      setError(`分析失敗: ${error.message || '網路錯誤'}`);
    } finally {
      setIsAnalyzing(false);
    }
  };

  const loadDebugInfo = async () => {
    try {
      const data = await apiRequest('GET', `/api/debug/spreadsheets/${spreadsheetId}/worksheets`);
      setDebugInfo(data);
    } catch (error) {
      console.error('Error loading debug info:', error);
    }
  };

  const generateReport = async (analysisId: string, suggestionIndex: number) => {
    setIsGeneratingReport(true);
    try {
      await apiRequest('POST', `/api/worksheet-analyses/${analysisId}/generate-report`, { suggestionIndex });
      const analysis = analyses.find(a => a.id === analysisId);
      if (analysis) {
        await loadReports(analysis.worksheetId);
      }
    } catch (error) {
      console.error('Error generating report:', error);
    } finally {
      setIsGeneratingReport(false);
    }
  };

  const getCategoryIcon = (category: string) => {
    switch (category) {
      case 'sales': return <TrendingUp className="h-4 w-4" />;
      case 'customer': return <Activity className="h-4 w-4" />;
      case 'education': return <FileText className="h-4 w-4" />;
      case 'financial': return <BarChart3 className="h-4 w-4" />;
      default: return <Brain className="h-4 w-4" />;
    }
  };

  const getCategoryColor = (category: string) => {
    switch (category) {
      case 'sales': return 'bg-green-100 text-green-800';
      case 'customer': return 'bg-blue-100 text-blue-800';
      case 'education': return 'bg-purple-100 text-purple-800';
      case 'financial': return 'bg-yellow-100 text-yellow-800';
      default: return 'bg-gray-100 text-gray-800';
    }
  };

  const renderReportVisualization = (report: AutoGeneratedReport) => {
    const { data, config } = report;

    if (report.reportType === 'kpi') {
      return (
        <Card>
          <CardHeader>
            <CardTitle className="text-3xl font-bold">{data.value}</CardTitle>
            <CardDescription>{data.metric} ({data.aggregation})</CardDescription>
          </CardHeader>
        </Card>
      );
    }

    if (report.reportType === 'chart' && data.data) {
      const chartData = data.data;

      switch (config.chartType) {
        case 'bar':
          return (
            <ResponsiveContainer width="100%" height={300}>
              <BarChart data={chartData}>
                <CartesianGrid strokeDasharray="3 3" />
                <XAxis dataKey="label" />
                <YAxis />
                <Tooltip />
                <Bar dataKey="value" fill="#3B82F6" />
              </BarChart>
            </ResponsiveContainer>
          );

        case 'line':
          return (
            <ResponsiveContainer width="100%" height={300}>
              <LineChart data={chartData}>
                <CartesianGrid strokeDasharray="3 3" />
                <XAxis dataKey="label" />
                <YAxis />
                <Tooltip />
                <Line type="monotone" dataKey="value" stroke="#3B82F6" strokeWidth={2} />
              </LineChart>
            </ResponsiveContainer>
          );

        case 'pie':
          return (
            <ResponsiveContainer width="100%" height={300}>
              <PieChart>
                <Pie
                  data={chartData}
                  cx="50%"
                  cy="50%"
                  labelLine={false}
                  label={({ name, percent }) => `${name} ${(percent * 100).toFixed(0)}%`}
                  outerRadius={80}
                  fill="#8884d8"
                  dataKey="value"
                >
                  {chartData.map((entry: any, index: number) => (
                    <Cell key={`cell-${index}`} fill={`hsl(${index * 45}, 70%, 60%)`} />
                  ))}
                </Pie>
                <Tooltip />
              </PieChart>
            </ResponsiveContainer>
          );
      }
    }

    if (report.reportType === 'table' && data.data) {
      const tableData = data.data.slice(0, 5); // Show first 5 rows
      const columns = Object.keys(tableData[0] || {});

      return (
        <div className="overflow-x-auto">
          <table className="min-w-full divide-y divide-gray-200">
            <thead className="bg-gray-50">
              <tr>
                {columns.map((column) => (
                  <th key={column} className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase">
                    {column}
                  </th>
                ))}
              </tr>
            </thead>
            <tbody className="bg-white divide-y divide-gray-200">
              {tableData.map((row: any, index: number) => (
                <tr key={index}>
                  {columns.map((column) => (
                    <td key={column} className="px-6 py-4 whitespace-nowrap text-sm text-gray-900">
                      {row[column]}
                    </td>
                  ))}
                </tr>
              ))}
            </tbody>
          </table>
          {data.totalRows > 5 && (
            <div className="px-6 py-3 bg-gray-50 text-sm text-gray-500">
              顯示 5 筆，共 {data.totalRows} 筆資料
            </div>
          )}
        </div>
      );
    }

    return <div className="text-gray-500">無法顯示此報表類型</div>;
  };

  return (
    <div className="space-y-6">
      {/* Header */}
      <div className="flex items-center justify-between">
        <div>
          <h2 className="text-2xl font-bold flex items-center gap-2">
            <Brain className="h-6 w-6" />
            智能分析儀表板
          </h2>
          <p className="text-gray-600">自動辨識工作表內容並生成建議報表</p>
        </div>
        <div className="flex gap-2">
          <Button
            onClick={analyzeAllWorksheets}
            disabled={isAnalyzing}
            className="flex items-center gap-2"
          >
            {isAnalyzing ? <RefreshCw className="h-4 w-4 animate-spin" /> : <Zap className="h-4 w-4" />}
            {isAnalyzing ? '分析中...' : '重新分析'}
          </Button>
          {process.env.NODE_ENV === 'development' && (
            <Button
              variant="outline"
              onClick={loadDebugInfo}
              className="flex items-center gap-2"
            >
              🔍 調試信息
            </Button>
          )}
        </div>
      </div>

      {/* Error Display */}
      {error && (
        <Alert variant="destructive">
          <AlertCircle className="h-4 w-4" />
          <AlertDescription>{error}</AlertDescription>
        </Alert>
      )}

      {/* Debug Info (development only) */}
      {debugInfo && process.env.NODE_ENV === 'development' && (
        <Card className="bg-gray-50">
          <CardHeader>
            <CardTitle className="text-sm">調試信息</CardTitle>
          </CardHeader>
          <CardContent>
            <div className="text-xs">
              <p><strong>總工作表:</strong> {debugInfo.summary?.total || 0}</p>
              <p><strong>已啟用:</strong> {debugInfo.summary?.enabled || 0}</p>
              <p><strong>有數據:</strong> {debugInfo.summary?.withData || 0}</p>
              <details className="mt-2">
                <summary className="cursor-pointer font-medium">詳細資訊</summary>
                <pre className="mt-2 bg-white p-2 rounded text-xs overflow-auto max-h-40">
                  {JSON.stringify(debugInfo, null, 2)}
                </pre>
              </details>
            </div>
          </CardContent>
        </Card>
      )}

      {/* Analysis Overview */}
      <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
        <Card>
          <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
            <CardTitle className="text-sm font-medium">已分析工作表</CardTitle>
            <FileText className="h-4 w-4 text-muted-foreground" />
          </CardHeader>
          <CardContent>
            <div className="text-2xl font-bold">{analyses.length}</div>
            <p className="text-xs text-muted-foreground">
              共 {worksheets.filter(w => w.isEnabled).length} 個啟用工作表
            </p>
          </CardContent>
        </Card>

        <Card>
          <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
            <CardTitle className="text-sm font-medium">自動生成報表</CardTitle>
            <BarChart3 className="h-4 w-4 text-muted-foreground" />
          </CardHeader>
          <CardContent>
            <div className="text-2xl font-bold">{reports.length}</div>
            <p className="text-xs text-muted-foreground">
              可用的智能報表
            </p>
          </CardContent>
        </Card>

        <Card>
          <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
            <CardTitle className="text-sm font-medium">平均信心度</CardTitle>
            <CheckCircle className="h-4 w-4 text-muted-foreground" />
          </CardHeader>
          <CardContent>
            <div className="text-2xl font-bold">
              {analyses.length > 0
                ? Math.round(analyses.reduce((sum, a) => sum + a.confidence, 0) / analyses.length)
                : 0}%
            </div>
            <p className="text-xs text-muted-foreground">
              分析準確度
            </p>
          </CardContent>
        </Card>
      </div>

      {/* Main Content */}
      <Tabs value={activeTab} onValueChange={setActiveTab}>
        <TabsList>
          <TabsTrigger value="overview">分析總覽</TabsTrigger>
          <TabsTrigger value="reports">自動報表</TabsTrigger>
          <TabsTrigger value="details">詳細分析</TabsTrigger>
        </TabsList>

        <TabsContent value="overview" className="space-y-4">
          {analyses.length === 0 ? (
            <Alert>
              <AlertCircle className="h-4 w-4" />
              <AlertDescription>
                尚未有分析結果。請點擊「重新分析」按鈕開始自動分析您的工作表。
              </AlertDescription>
            </Alert>
          ) : (
            <div className="grid grid-cols-1 lg:grid-cols-2 gap-4">
              {analyses.map((analysis) => {
                const worksheet = worksheets.find(w => w.id === analysis.worksheetId);
                return (
                  <Card key={analysis.id} className="cursor-pointer hover:shadow-lg transition-shadow"
                        onClick={() => setSelectedAnalysis(analysis)}>
                    <CardHeader>
                      <div className="flex items-center justify-between">
                        <CardTitle className="text-lg">
                          {worksheet?.worksheetName || '未知工作表'}
                        </CardTitle>
                        <Badge className={getCategoryColor(analysis.category)}>
                          {getCategoryIcon(analysis.category)}
                          <span className="ml-1 capitalize">{analysis.category}</span>
                        </Badge>
                      </div>
                      <CardDescription>
                        信心度: {analysis.confidence}% | 資料列數: {analysis.rowCount}
                      </CardDescription>
                    </CardHeader>
                    <CardContent>
                      <div className="space-y-3">
                        <div>
                          <div className="text-sm font-medium mb-2">資料品質</div>
                          <div className="space-y-1">
                            <div className="flex justify-between text-xs">
                              <span>完整性</span>
                              <span>{Math.round(analysis.dataQuality.completeness * 100)}%</span>
                            </div>
                            <Progress value={analysis.dataQuality.completeness * 100} className="h-2" />
                          </div>
                        </div>
                        <div className="text-sm text-gray-600">
                          {analysis.suggestedReports.length} 個建議報表
                        </div>
                      </div>
                    </CardContent>
                  </Card>
                );
              })}
            </div>
          )}
        </TabsContent>

        <TabsContent value="reports" className="space-y-4">
          {reports.length === 0 ? (
            <Alert>
              <AlertCircle className="h-4 w-4" />
              <AlertDescription>
                尚未生成自動報表。請在「分析總覽」中選擇分析結果並生成報表。
              </AlertDescription>
            </Alert>
          ) : (
            <div className="grid grid-cols-1 lg:grid-cols-2 gap-4">
              {reports.map((report) => (
                <Card key={report.id}>
                  <CardHeader>
                    <CardTitle className="flex items-center gap-2">
                      {report.reportType === 'kpi' && <Activity className="h-4 w-4" />}
                      {report.reportType === 'chart' && <BarChart3 className="h-4 w-4" />}
                      {report.reportType === 'table' && <FileText className="h-4 w-4" />}
                      {report.title}
                    </CardTitle>
                    {report.description && (
                      <CardDescription>{report.description}</CardDescription>
                    )}
                  </CardHeader>
                  <CardContent>
                    {renderReportVisualization(report)}
                  </CardContent>
                </Card>
              ))}
            </div>
          )}
        </TabsContent>

        <TabsContent value="details" className="space-y-4">
          {selectedAnalysis ? (
            <div className="space-y-6">
              <Card>
                <CardHeader>
                  <CardTitle>工作表詳細分析</CardTitle>
                  <CardDescription>
                    {worksheets.find(w => w.id === selectedAnalysis.worksheetId)?.worksheetName}
                  </CardDescription>
                </CardHeader>
                <CardContent className="space-y-4">
                  <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
                    <div>
                      <div className="text-sm font-medium">資料完整性</div>
                      <div className="text-2xl font-bold text-green-600">
                        {Math.round(selectedAnalysis.dataQuality.completeness * 100)}%
                      </div>
                    </div>
                    <div>
                      <div className="text-sm font-medium">一致性</div>
                      <div className="text-2xl font-bold text-blue-600">
                        {Math.round(selectedAnalysis.dataQuality.consistency * 100)}%
                      </div>
                    </div>
                    <div>
                      <div className="text-sm font-medium">準確性</div>
                      <div className="text-2xl font-bold text-purple-600">
                        {Math.round(selectedAnalysis.dataQuality.accuracy * 100)}%
                      </div>
                    </div>
                  </div>

                  <div>
                    <h4 className="text-lg font-semibold mb-2">欄位分析</h4>
                    <div className="space-y-2">
                      {selectedAnalysis.columnAnalyses.map((column, index) => (
                        <div key={index} className="flex items-center justify-between p-3 bg-gray-50 rounded">
                          <div>
                            <div className="font-medium">{column.name}</div>
                            <div className="text-sm text-gray-600">
                              類型: {column.type} | 信心度: {Math.round(column.confidence * 100)}%
                            </div>
                          </div>
                          <Badge variant="outline">
                            {column.uniqueCount} 個唯一值
                          </Badge>
                        </div>
                      ))}
                    </div>
                  </div>

                  <div>
                    <h4 className="text-lg font-semibold mb-2">建議報表</h4>
                    <div className="space-y-2">
                      {selectedAnalysis.suggestedReports.map((suggestion, index) => (
                        <div key={index} className="flex items-center justify-between p-3 border rounded">
                          <div>
                            <div className="font-medium">{suggestion.title}</div>
                            <div className="text-sm text-gray-600">{suggestion.description}</div>
                            <div className="text-xs text-gray-500">
                              信心度: {Math.round(suggestion.confidence * 100)}%
                            </div>
                          </div>
                          <Button
                            size="sm"
                            onClick={() => generateReport(selectedAnalysis.id, index)}
                            disabled={isGeneratingReport}
                          >
                            {isGeneratingReport ? '生成中...' : '生成報表'}
                          </Button>
                        </div>
                      ))}
                    </div>
                  </div>
                </CardContent>
              </Card>
            </div>
          ) : (
            <Alert>
              <AlertCircle className="h-4 w-4" />
              <AlertDescription>
                請在「分析總覽」中選擇一個分析結果查看詳細資訊。
              </AlertDescription>
            </Alert>
          )}
        </TabsContent>
      </Tabs>
    </div>
  );
}
