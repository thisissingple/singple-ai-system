import { useState, useEffect } from 'react';
import { useQuery } from '@tanstack/react-query';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Badge } from '@/components/ui/badge';
import { Button } from '@/components/ui/button';
import {
  BarChart3,
  TrendingUp,
  Users,
  DollarSign,
  Activity,
  RefreshCw,
  Sparkles,
  Target,
  CheckCircle,
  Grid
} from 'lucide-react';
import { apiRequest } from '@/lib/queryClient';

interface WorksheetMeta {
  id: string;
  worksheetName: string;
  headers: string[];
  rowCount: number;
  isEnabled: boolean;
  spreadsheetId: string;
}

interface SheetRecord {
  id: string;
  data: Record<string, any>;
  rowIndex: number;
  worksheetId: string;
}

interface IntelligentKPI {
  id: string;
  name: string;
  value: number | string;
  calculation: string;
  category: 'conversion' | 'financial' | 'activity' | 'status';
  icon: any;
  color: string;
  description: string;
}

interface DataRelationship {
  sourceTable: string;
  targetTable: string;
  keyField: string;
  confidence: number;
  description: string;
}

interface AutoGeneratedTable {
  id: string;
  name: string;
  description: string;
  type: 'summary' | 'pivot' | 'analytics' | 'comparison';
  headers: string[];
  rows: any[][];
  insights: string[];
  sourceWorksheets: string[];
}

export function IntelligentAnalytics() {
  const [kpis, setKpis] = useState<IntelligentKPI[]>([]);
  const [relationships, setRelationships] = useState<DataRelationship[]>([]);
  const [analysisStatus, setAnalysisStatus] = useState<'idle' | 'analyzing' | 'completed' | 'error'>('idle');
  const [currentWorksheets, setCurrentWorksheets] = useState<WorksheetMeta[]>([]);
  const [generatedTables, setGeneratedTables] = useState<AutoGeneratedTable[]>([]);
  const [tableGenerationStatus, setTableGenerationStatus] = useState<'idle' | 'generating' | 'completed' | 'error'>('idle');

  // 獲取真實工作表數據
  const fetchWorksheetData = async (worksheetId: string): Promise<SheetRecord[]> => {
    try {
      return await apiRequest<SheetRecord[]>('GET', `/api/worksheets/${worksheetId}/data`);
    } catch (error) {
      console.error(`Error fetching data for worksheet ${worksheetId}:`, error);
      return [];
    }
  };

  // 獲取真實工作表列表
  const { data: worksheets = [], isLoading: worksheetsLoading } = useQuery<WorksheetMeta[]>({
    queryKey: ['/api/worksheets'],
    enabled: true
  });

  // AI 智能分析函數
  const performIntelligentAnalysis = async () => {
    setAnalysisStatus('analyzing');
    
    try {
      // 步驟1: 識別工作表類型和關係
      const detectedRelationships = analyzeDataRelationships(worksheets);
      setRelationships(detectedRelationships);

      // 步驟2: 根據你的需求自動計算 KPI
      const calculatedKPIs = await calculateIntelligentKPIs(worksheets);
      setKpis(calculatedKPIs);

      setAnalysisStatus('completed');
    } catch (error) {
      console.error('Intelligence analysis failed:', error);
      setAnalysisStatus('error');
    }
  };

  // 分析數據關係
  const analyzeDataRelationships = (sheets: WorksheetMeta[]): DataRelationship[] => {
    const relationships: DataRelationship[] = [];

    // 基於你的需求，自動識別關係：
    // 1. 打卡記錄表 <-> 購買記錄表 (通過姓名/電話)
    const experienceSheet = sheets.find(s => s.worksheetName.includes('體驗課上課記錄') || s.worksheetName.includes('打卡記錄'));
    const purchaseSheet = sheets.find(s => s.worksheetName.includes('購買記錄'));
    const consultationSheet = sheets.find(s => s.worksheetName.includes('諮詢成交'));

    if (experienceSheet && purchaseSheet) {
      relationships.push({
        sourceTable: experienceSheet.worksheetName,
        targetTable: purchaseSheet.worksheetName,
        keyField: '姓名/電話',
        confidence: 0.95,
        description: '通過學生姓名和電話關聯體驗課記錄與購買記錄'
      });
    }

    if (consultationSheet && purchaseSheet) {
      relationships.push({
        sourceTable: consultationSheet.worksheetName,
        targetTable: purchaseSheet.worksheetName,
        keyField: 'email',
        confidence: 0.90,
        description: '通過 email 關聯諮詢成交表與購買記錄表'
      });
    }

    return relationships;
  };

  // 智能計算 KPI（基於真實數據）
  const calculateIntelligentKPIs = async (sheets: WorksheetMeta[]): Promise<IntelligentKPI[]> => {
    const kpis: IntelligentKPI[] = [];

    try {
      // 獲取體驗課記錄表數據
      const experienceSheet = sheets.find(s => 
        s.worksheetName.includes('體驗課') || 
        s.worksheetName.includes('打卡記錄') ||
        s.worksheetName.includes('上課記錄')
      );
      
      // 獲取購買記錄表數據
      const purchaseSheet = sheets.find(s => 
        s.worksheetName.includes('購買記錄')
      );

      let experienceData: SheetRecord[] = [];
      let purchaseData: SheetRecord[] = [];

      if (experienceSheet) {
        experienceData = await fetchWorksheetData(experienceSheet.id);
      }
      
      if (purchaseSheet) {
        purchaseData = await fetchWorksheetData(purchaseSheet.id);
      }

      // KPI 1: 已成交數 = 狀態欄包含"已轉高"的總數
      if (experienceData.length > 0) {
        const completedCount = experienceData.filter(record => {
          const status = record.data?.['狀態'] || record.data?.['status'] || '';
          return status.toString().includes('已轉高') || status.toString().includes('已成交');
        }).length;
        
        kpis.push({
          id: 'completed_conversions',
          name: '已成交數',
          value: completedCount,
          calculation: '體驗課記錄表中「狀態」包含"已轉高"的統計',
          category: 'conversion',
          icon: CheckCircle,
          color: 'text-green-600',
          description: '已成功轉換的學生總數'
        });
      }

      // KPI 2: 體驗中學生數
      if (experienceData.length > 0) {
        const inExperienceCount = experienceData.filter(record => {
          const status = record.data?.['狀態'] || record.data?.['status'] || '';
          return status.toString().includes('體驗中') || status.toString().includes('進行中');
        }).length;
        
        kpis.push({
          id: 'in_experience',
          name: '體驗中學生數',
          value: inExperienceCount,
          calculation: '狀態包含"體驗中"或"進行中"的學生統計',
          category: 'activity',
          icon: Activity,
          color: 'text-blue-600',
          description: '正在體驗課程的學生數量'
        });
      }

      // KPI 3: 未成交學生數
      if (experienceData.length > 0) {
        const notConvertedCount = experienceData.filter(record => {
          const status = record.data?.['狀態'] || record.data?.['status'] || '';
          return status.toString().includes('未轉高') || status.toString().includes('未成交');
        }).length;
        
        kpis.push({
          id: 'not_converted',
          name: '未成交學生數',
          value: notConvertedCount,
          calculation: '狀態包含"未轉高"或"未成交"的學生統計',
          category: 'conversion',
          icon: Users,
          color: 'text-orange-600',
          description: '尚未轉換的學生數量'
        });
      }

      // KPI 4: 未開始學生數
      if (experienceData.length > 0) {
        const notStartedCount = experienceData.filter(record => {
          const status = record.data?.['狀態'] || record.data?.['status'] || '';
          return status.toString().includes('未開始') || status === '';
        }).length;
        
        kpis.push({
          id: 'not_started',
          name: '未開始學生數',
          value: notStartedCount,
          calculation: '狀態包含"未開始"或空值的學生統計',
          category: 'status',
          icon: Target,
          color: 'text-gray-600',
          description: '尚未開始體驗課程的學生'
        });
      }

      // KPI 5: 已成交金額（基於購買記錄表）
      if (purchaseData.length > 0) {
        const totalRevenue = purchaseData.reduce((sum, record) => {
          const amount = parseFloat(record.data?.['金額'] || record.data?.['amount'] || '0');
          return sum + (isNaN(amount) ? 0 : amount);
        }, 0);
        
        kpis.push({
          id: 'total_revenue',
          name: '已成交金額',
          value: `NT$ ${totalRevenue.toLocaleString()}`,
          calculation: '購買記錄表中所有金額的加總',
          category: 'financial',
          icon: DollarSign,
          color: 'text-green-700',
          description: '已成交學生的總收入金額'
        });
      }

      // 如果沒有數據，顯示默認值
      if (kpis.length === 0) {
        kpis.push({
          id: 'no_data',
          name: '等待數據',
          value: '尚無數據',
          calculation: '請檢查 Google Sheets 同步狀態',
          category: 'status',
          icon: Target,
          color: 'text-gray-600',
          description: '系統正在等待工作表數據同步'
        });
      }

    } catch (error) {
      console.error('Error calculating KPIs:', error);
      // 錯誤時顯示錯誤 KPI
      kpis.push({
        id: 'error_state',
        name: '計算錯誤',
        value: '數據錯誤',
        calculation: '無法計算 KPI，請檢查數據連接',
        category: 'status',
        icon: Target,
        color: 'text-red-600',
        description: '計算過程中發生錯誤'
      });
    }

    return kpis;
  };

  // 智能表格生成功能
  const generateIntelligentTables = async () => {
    setTableGenerationStatus('generating');
    
    try {
      const tables: AutoGeneratedTable[] = [];
      
      // 獲取所有啟用的工作表數據
      const enabledSheets = worksheets.filter(w => w.isEnabled);
      const allData: { [worksheetId: string]: SheetRecord[] } = {};
      
      for (const sheet of enabledSheets) {
        allData[sheet.id] = await fetchWorksheetData(sheet.id);
      }

      // 表格 1: 學生轉換狀態摘要表
      const experienceSheet = worksheets.find(s => 
        s.worksheetName.includes('體驗課') || s.worksheetName.includes('上課記錄')
      );
      
      if (experienceSheet && allData[experienceSheet.id]) {
        const experienceData = allData[experienceSheet.id];
        const statusSummary = experienceData.reduce((acc: any, record) => {
          const status = record.data?.['狀態'] || '未分類';
          const teacher = record.data?.['老師'] || record.data?.['授課老師'] || '未指定';
          
          const key = `${teacher}_${status}`;
          if (!acc[key]) {
            acc[key] = { teacher, status, count: 0, students: [] };
          }
          acc[key].count++;
          acc[key].students.push(record.data?.['姓名'] || '未知');
          return acc;
        }, {});

        const summaryRows = Object.values(statusSummary).map((item: any) => [
          item.teacher,
          item.status,
          item.count,
          Math.round((item.count / experienceData.length) * 100) + '%'
        ]);

        tables.push({
          id: 'status_summary',
          name: '學生轉換狀態摘要',
          description: '按老師和狀態分組的學生統計',
          type: 'summary',
          headers: ['授課老師', '學生狀態', '學生數量', '佔比'],
          rows: summaryRows,
          insights: [
            `總共 ${experienceData.length} 位學生`,
            `分布在 ${Object.keys(statusSummary).length} 個不同的老師-狀態組合中`,
            '可以幫助識別表現最佳的老師和需要關注的學生狀態'
          ],
          sourceWorksheets: [experienceSheet.worksheetName]
        });
      }

      // 表格 2: 購買分析對比表
      const purchaseSheet = worksheets.find(s => s.worksheetName.includes('購買記錄'));
      
      if (purchaseSheet && allData[purchaseSheet.id] && experienceSheet && allData[experienceSheet.id]) {
        const purchaseData = allData[purchaseSheet.id];
        const experienceData = allData[experienceSheet.id];
        
        // 創建學生購買對比分析
        const studentComparison = experienceData.map(expRecord => {
          const studentName = expRecord.data?.['姓名'] || '';
          const studentPhone = expRecord.data?.['電話'] || '';
          const studentStatus = expRecord.data?.['狀態'] || '';
          
          // 查找是否有購買記錄
          const purchaseRecord = purchaseData.find(purRecord => 
            purRecord.data?.['姓名'] === studentName || 
            purRecord.data?.['電話'] === studentPhone
          );
          
          return [
            studentName,
            studentPhone,
            studentStatus,
            purchaseRecord ? '是' : '否',
            purchaseRecord ? (purchaseRecord.data?.['金額'] || '0') : '0',
            purchaseRecord ? (purchaseRecord.data?.['方案'] || '未知') : '-'
          ];
        });

        tables.push({
          id: 'purchase_comparison',
          name: '學生購買轉換對比',
          description: '體驗課學生與購買記錄的完整對比分析',
          type: 'comparison',
          headers: ['學生姓名', '聯絡電話', '體驗狀態', '是否購買', '購買金額', '購買方案'],
          rows: studentComparison.slice(0, 20), // 限制前20筆以避免表格過大
          insights: [
            `${studentComparison.filter(row => row[3] === '是').length} 位學生已購買`,
            `轉換率: ${Math.round((studentComparison.filter(row => row[3] === '是').length / studentComparison.length) * 100)}%`,
            '可以幫助識別哪些學生完成了從體驗到購買的完整轉換'
          ],
          sourceWorksheets: [experienceSheet.worksheetName, purchaseSheet.worksheetName]
        });
      }

      // 表格 3: 時間趨勢分析表
      if (experienceSheet && allData[experienceSheet.id]) {
        const experienceData = allData[experienceSheet.id];
        const dateAnalysis = experienceData.reduce((acc: any, record) => {
          const dateStr = record.data?.['上課日期'] || record.data?.['日期'] || '未知日期';
          
          if (dateStr !== '未知日期') {
            // 簡化日期處理 - 按月份分組
            const month = dateStr.substring(0, 7) || dateStr.substring(0, 6); // YYYY-MM 格式
            if (!acc[month]) {
              acc[month] = { total: 0, completed: 0, inProgress: 0 };
            }
            acc[month].total++;
            
            const status = record.data?.['狀態'] || '';
            if (status.includes('已轉高') || status.includes('已成交')) {
              acc[month].completed++;
            } else if (status.includes('體驗中') || status.includes('進行中')) {
              acc[month].inProgress++;
            }
          }
          return acc;
        }, {});

        const trendRows = Object.entries(dateAnalysis)
          .sort(([a], [b]) => a.localeCompare(b))
          .map(([month, data]: [string, any]) => [
            month,
            data.total,
            data.completed,
            data.inProgress,
            Math.round((data.completed / data.total) * 100) + '%'
          ]);

        tables.push({
          id: 'time_trend',
          name: '時間趨勢分析',
          description: '按月份統計的學生活動和轉換趨勢',
          type: 'analytics',
          headers: ['月份', '總學生數', '已成交', '進行中', '成交率'],
          rows: trendRows,
          insights: [
            `分析了 ${trendRows.length} 個月的數據`,
            `平均每月 ${Math.round(Object.values(dateAnalysis).reduce((sum: number, data: any) => sum + data.total, 0) / trendRows.length)} 位學生`,
            '可以幫助識別業務的季節性趨勢和成長模式'
          ],
          sourceWorksheets: [experienceSheet.worksheetName]
        });
      }

      setGeneratedTables(tables);
      setTableGenerationStatus('completed');
      
    } catch (error) {
      console.error('Error generating tables:', error);
      setTableGenerationStatus('error');
    }
  };

  useEffect(() => {
    if (worksheets.length > 0) {
      setCurrentWorksheets(worksheets);
    }
  }, [worksheets]);

  return (
    <div className="space-y-6">
      {/* 智能分析控制面板 */}
      <Card>
        <CardHeader>
          <CardTitle className="flex items-center gap-2">
            <Sparkles className="h-5 w-5 text-purple-600" />
            AI 智能數據分析
          </CardTitle>
        </CardHeader>
        <CardContent>
          <div className="space-y-4">
            <div className="flex items-center justify-between">
              <div>
                <p className="text-sm text-muted-foreground">
                  檢測到 {worksheets.length} 個工作表，
                  {worksheets.filter(w => w.isEnabled).length} 個已啟用
                </p>
                <p className="text-xs text-muted-foreground mt-1">
                  系統將自動分析欄位關係並計算 KPI 指標
                </p>
              </div>
              <Button 
                onClick={performIntelligentAnalysis}
                disabled={analysisStatus === 'analyzing' || worksheetsLoading}
                className="gap-2"
                data-testid="auto-analyze-button"
              >
                {analysisStatus === 'analyzing' ? (
                  <RefreshCw className="h-4 w-4 animate-spin" />
                ) : (
                  <Sparkles className="h-4 w-4" />
                )}
                {analysisStatus === 'analyzing' ? '分析中...' : '一鍵自動分析'}
              </Button>
            </div>

            {/* 分析狀態 */}
            <div className="flex items-center gap-2">
              <Badge 
                variant={analysisStatus === 'completed' ? 'default' : 
                        analysisStatus === 'analyzing' ? 'secondary' : 
                        analysisStatus === 'error' ? 'destructive' : 'outline'}
                data-testid="analysis-status-badge"
              >
                {analysisStatus === 'completed' ? '分析完成' :
                 analysisStatus === 'analyzing' ? '正在分析' :
                 analysisStatus === 'error' ? '分析失敗' : '待分析'}
              </Badge>
            </div>
          </div>
        </CardContent>
      </Card>

      {/* 檢測到的數據關係 */}
      {relationships.length > 0 && (
        <Card>
          <CardHeader>
            <CardTitle className="text-lg">數據關係分析</CardTitle>
          </CardHeader>
          <CardContent>
            <div className="space-y-3">
              {relationships.map((rel, index) => (
                <div key={index} className="flex items-center justify-between p-3 bg-muted/30 rounded-lg" data-testid={`relationship-${index}`}>
                  <div className="space-y-1">
                    <div className="font-medium">
                      {rel.sourceTable} ↔ {rel.targetTable}
                    </div>
                    <div className="text-sm text-muted-foreground">
                      關聯欄位: {rel.keyField}
                    </div>
                    <div className="text-xs text-muted-foreground">
                      {rel.description}
                    </div>
                  </div>
                  <Badge variant="secondary" data-testid={`relationship-confidence-${index}`}>
                    {Math.round(rel.confidence * 100)}% 信心度
                  </Badge>
                </div>
              ))}
            </div>
          </CardContent>
        </Card>
      )}

      {/* 智能計算的 KPI */}
      {kpis.length > 0 && (
        <div className="space-y-4">
          <h3 className="text-lg font-semibold flex items-center gap-2">
            <BarChart3 className="h-5 w-5" />
            智能 KPI 指標
          </h3>
          
          <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
            {kpis.map((kpi) => {
              const IconComponent = kpi.icon;
              return (
                <Card key={kpi.id} className="relative overflow-hidden" data-testid={`kpi-card-${kpi.id}`}>
                  <div className={`absolute inset-0 bg-gradient-to-br opacity-10 ${
                    kpi.category === 'conversion' ? 'from-green-500 to-green-600' :
                    kpi.category === 'financial' ? 'from-emerald-500 to-emerald-600' :
                    kpi.category === 'activity' ? 'from-blue-500 to-blue-600' :
                    'from-gray-500 to-gray-600'
                  }`} />
                  
                  <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
                    <CardTitle className="text-sm font-medium" data-testid={`kpi-title-${kpi.id}`}>{kpi.name}</CardTitle>
                    <IconComponent className={`h-4 w-4 ${kpi.color}`} data-testid={`kpi-icon-${kpi.id}`} />
                  </CardHeader>
                  
                  <CardContent>
                    <div className={`text-2xl font-bold ${kpi.color}`} data-testid={`kpi-value-${kpi.id}`}>
                      {kpi.value}
                    </div>
                    <p className="text-xs text-muted-foreground mt-1" data-testid={`kpi-description-${kpi.id}`}>
                      {kpi.description}
                    </p>
                    <div className="mt-3 pt-3 border-t border-border/40">
                      <p className="text-xs text-muted-foreground" data-testid={`kpi-calculation-${kpi.id}`}>
                        <strong>計算邏輯:</strong> {kpi.calculation}
                      </p>
                    </div>
                  </CardContent>
                </Card>
              );
            })}
          </div>
        </div>
      )}

      {/* 一鍵智能表格生成 */}
      <Card>
        <CardHeader>
          <CardTitle className="flex items-center gap-2">
            <Grid className="h-5 w-5 text-indigo-600" />
            一鍵智能表格生成
          </CardTitle>
        </CardHeader>
        <CardContent>
          <div className="space-y-4">
            <div className="flex items-center justify-between">
              <div>
                <p className="text-sm text-muted-foreground">
                  自動分析工作表數據並生成多種類型的智能表格
                </p>
                <p className="text-xs text-muted-foreground mt-1">
                  包括轉換狀態摘要、購買對比分析、時間趨勢等
                </p>
              </div>
              <Button 
                onClick={generateIntelligentTables}
                disabled={tableGenerationStatus === 'generating' || worksheetsLoading || worksheets.length === 0}
                className="gap-2"
                data-testid="generate-tables-button"
              >
                {tableGenerationStatus === 'generating' ? (
                  <RefreshCw className="h-4 w-4 animate-spin" />
                ) : (
                  <Grid className="h-4 w-4" />
                )}
                {tableGenerationStatus === 'generating' ? '生成中...' : '一鍵生成表格'}
              </Button>
            </div>

            {/* 生成狀態 */}
            <div className="flex items-center gap-2">
              <Badge 
                variant={tableGenerationStatus === 'completed' ? 'default' : 
                        tableGenerationStatus === 'generating' ? 'secondary' : 
                        tableGenerationStatus === 'error' ? 'destructive' : 'outline'}
                data-testid="table-generation-status"
              >
                {tableGenerationStatus === 'completed' ? '生成完成' :
                 tableGenerationStatus === 'generating' ? '正在生成' :
                 tableGenerationStatus === 'error' ? '生成失敗' : '待生成'}
              </Badge>
            </div>
          </div>
        </CardContent>
      </Card>

      {/* 自動生成的智能表格 */}
      {generatedTables.length > 0 && (
        <div className="space-y-4">
          <h3 className="text-lg font-semibold flex items-center gap-2">
            <Grid className="h-5 w-5" />
            自動生成的智能表格
          </h3>
          
          {generatedTables.map((table, tableIndex) => (
            <Card key={table.id} className="overflow-hidden" data-testid={`generated-table-${table.id}`}>
              <CardHeader>
                <div className="flex items-start justify-between">
                  <div className="space-y-1">
                    <CardTitle className="text-lg">{table.name}</CardTitle>
                    <p className="text-sm text-muted-foreground">{table.description}</p>
                    <div className="flex items-center gap-2 mt-2">
                      <Badge variant="outline" className="text-xs">
                        {table.type === 'summary' ? '摘要表' :
                         table.type === 'pivot' ? '交叉分析' :
                         table.type === 'analytics' ? '分析表' : '對比表'}
                      </Badge>
                      <span className="text-xs text-muted-foreground">
                        數據來源: {table.sourceWorksheets.join(', ')}
                      </span>
                    </div>
                  </div>
                </div>
              </CardHeader>
              
              <CardContent>
                {/* 表格內容 */}
                <div className="overflow-x-auto mb-4">
                  <table className="w-full text-sm border-collapse border border-border">
                    <thead>
                      <tr className="bg-muted/30">
                        {table.headers.map((header, headerIndex) => (
                          <th key={headerIndex} className="border border-border p-2 text-left font-medium">
                            {header}
                          </th>
                        ))}
                      </tr>
                    </thead>
                    <tbody>
                      {table.rows.map((row, rowIndex) => (
                        <tr key={rowIndex} className="hover:bg-muted/20">
                          {row.map((cell, cellIndex) => (
                            <td key={cellIndex} className="border border-border p-2" data-testid={`table-cell-${table.id}-${rowIndex}-${cellIndex}`}>
                              {cell}
                            </td>
                          ))}
                        </tr>
                      ))}
                    </tbody>
                  </table>
                </div>

                {/* 洞察分析 */}
                <div className="space-y-2">
                  <h4 className="font-medium text-sm">🔍 數據洞察</h4>
                  <div className="grid grid-cols-1 gap-2">
                    {table.insights.map((insight, insightIndex) => (
                      <div key={insightIndex} className="text-xs text-muted-foreground bg-muted/20 p-2 rounded-md" data-testid={`table-insight-${table.id}-${insightIndex}`}>
                        • {insight}
                      </div>
                    ))}
                  </div>
                </div>
              </CardContent>
            </Card>
          ))}
        </div>
      )}

      {/* 工作表詳情 */}
      <Card>
        <CardHeader>
          <CardTitle>工作表概覽</CardTitle>
        </CardHeader>
        <CardContent>
          <div className="space-y-3">
            {worksheets.map((sheet) => (
              <div key={sheet.id} className="flex items-center justify-between p-3 bg-muted/20 rounded-lg">
                <div className="space-y-1">
                  <div className="font-medium">{sheet.worksheetName}</div>
                  <div className="text-sm text-muted-foreground">
                    {sheet.rowCount} 行數據，{sheet.headers.length} 個欄位
                  </div>
                  <div className="text-xs text-muted-foreground">
                    欄位: {sheet.headers.join(', ')}
                  </div>
                </div>
                <div className="flex items-center gap-2">
                  <Badge variant={sheet.isEnabled ? 'default' : 'secondary'}>
                    {sheet.isEnabled ? '已啟用' : '未啟用'}
                  </Badge>
                </div>
              </div>
            ))}
          </div>
        </CardContent>
      </Card>
    </div>
  );
}
